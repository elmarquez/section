var Section=function(elementId,model,options){var instance=this;instance.handlers={},instance.model=model,instance.mouse={x:0,y:0},instance.options={background:16777215,debug:!1,defaultElement:{name:"element",constructionPlane:90,height:500,width:500,thickness:10,maxLayerThickness:1e3,color:13421772,opacity:1,material:null,transparency:1,type:"sheet",offset:{top:0,left:0,bottom:0,right:0,front:0,back:0}},enableSelection:!0,fps:30,minThickness:5,selectedMaterialColor:16776960,selectedMaterialOpacity:.2,showAssemblyBoundingBox:!1,showLayerBoundingBox:!1,showOriginMarker:!1},instance.raycaster=new THREE.Raycaster,instance.scene=null,instance.selected=null,instance.unselectedOpacity=.2,instance.viewport=document.getElementById(elementId),instance.viewportHeight=instance.viewport.clientHeight,instance.viewportWidth=instance.viewport.clientWidth,options&&Object.keys(options).forEach(function(key){instance.options[key]=options[key]}),this.animate=function(){setTimeout(function(){requestAnimationFrame(instance.animate),instance.select(),instance.renderer.render(instance.scene,instance.camera),instance.controls.update()},1e3/instance.options.fps)},this.applyModelDefaults=function(model,defaults){Array.isArray(model)?model.forEach(function(element){instance.applyModelDefaults(element,defaults)}):Object.keys(defaults).forEach(function(key){model.hasOwnProperty(key)||(model[key]=defaults[key])})},this.build=function(){var mesh,group=new THREE.Object3D,thickness=0,z=-0;instance.applyModelDefaults(instance.model.layers,instance.options.defaultElement),instance.model.layers.forEach(function(layer){if(thickness=Array.isArray(layer)?layer.reduce(function(last,current){return current.thickness>last?current.thickness:last},0):layer.thickness,thickness=thickness<instance.options.minThickness?instance.options.minThickness:thickness,mesh=instance.buildLayer(layer),z+=thickness/2,mesh.position.set(0,0,z),z+=thickness/2,group.add(mesh),instance.options.showLayerBoundingBox){var bbox=new THREE.BoundingBoxHelper(mesh,16711680);bbox.update(),instance.scene.add(bbox)}}),group.position.set(0,0,0),instance.scene.add(group),instance.options.showAssemblyBoundingBox&&instance.scene.add(new THREE.Mesh(group,new THREE.MeshBasicMaterial({color:16629773,wireframe:!0})))},this.buildLayer=function(layer){var boundingBsp,boundingGeometry,boundingMesh,first,i,item,material,mesh,subassemblies=[];if(boundingGeometry=new THREE.BoxGeometry(instance.options.defaultElement.height,instance.options.defaultElement.width,instance.options.defaultElement.maxLayerThickness),boundingMesh=new THREE.Mesh(boundingGeometry),boundingBsp=new ThreeBSP(boundingMesh),Array.isArray(layer))if(layer.forEach(function(subassembly){mesh=instance.buildLayer(subassembly),mesh.position.set(-(mesh.userData.width/2)+mesh.userData.offsetX,-(mesh.userData.height/2)+mesh.userData.offsetY,0),mesh=instance.intersect(mesh,boundingBsp),mesh.position.set(0,0,0),subassemblies.push(mesh)}),subassemblies.length>1)for(mesh=new THREE.Object3D,first=subassemblies[0],mesh.add(first),i=1;i<subassemblies.length;i++)item=subassemblies[i],item=instance.subtract(item,first),mesh.add(item);else mesh=subassemblies[0];else"unit"===layer.type?mesh=instance.createUnitizedMesh(layer):"frame"===layer.type?mesh=instance.createUnitMesh(layer.name,layer.width,instance.options.defaultElement.height,layer.thickness-layer.offset.front-layer.offset.back,layer.material):"void"===layer.type?(material=new THREE.MeshLambertMaterial({color:layer.material.color||0,transparent:layer.material.transparent||!0,opacity:layer.material.opacity||0}),mesh=instance.createUnitMesh(layer.name,instance.options.defaultElement.width,instance.options.defaultElement.height,layer.thickness-layer.offset.front-layer.offset.back,material)):("infill"===layer.type||"sheet"===layer.type)&&(mesh=instance.createUnitMesh(layer.name,instance.options.defaultElement.width,instance.options.defaultElement.height,layer.thickness-layer.offset.front-layer.offset.back,layer.material));return mesh.userData.name=layer.name||"layer name",mesh},this.createUnitizedMesh=function(obj){var cols,i,j,material,mesh,rows,unit,geometry=new THREE.Geometry;for(rows=Math.ceil(instance.options.defaultElement.height/obj.height),cols=Math.ceil(instance.options.defaultElement.width/obj.width),instance.options.debug&&console.log("cols %s rows %s",cols,rows),i=0;rows>i;i++)for(j=0;cols>j;j++){unit=new THREE.BoxGeometry(obj.width-obj.offset.left-obj.offset.right,obj.height-obj.offset.top-obj.offset.bottom,obj.thickness-obj.offset.front-obj.offset.back);var v=new THREE.Vector3(j*obj.width,i*obj.height,0),m=new THREE.Matrix4;m.setPosition(v),geometry.merge(unit,m)}return material=instance.getMaterial(obj.material),geometry.computeFaceNormals(),geometry.computeVertexNormals(),mesh=new THREE.Mesh(geometry,material),mesh.castShadow=!0,mesh.receiveShadow=!1,mesh.userData.name=obj.name,mesh.userData.offsetX=obj.width/2,mesh.userData.offsetY=obj.height/2,mesh.userData.height=rows*obj.height,mesh.userData.width=cols*obj.width,mesh},this.createUnitMesh=function(name,width,height,thickness,material){var geom,mat,mesh;return geom=new THREE.BoxGeometry(width,height,thickness),mat=material instanceof THREE.Material?material:instance.getMaterial(material),mesh=new THREE.Mesh(geom,mat),mesh.castShadow=!0,mesh.receiveShadow=!1,mesh.userData.name=name,mesh.userData.offsetX=width/2,mesh.userData.offsetY=height/2,mesh.userData.height=height,mesh.userData.width=width,mesh},this.deselect=function(obj){if("Mesh"===obj.type){new TWEEN.Tween(obj.opacity).to(instance.options.unselectedOpacity,1e3)}else"Object3D"===obj.type},this.getMaterial=function(material){var texture;if(material&&material.texture)try{return texture=THREE.ImageUtils.loadTexture(material.texture),new THREE.MeshBasicMaterial({map:texture,side:THREE.DoubleSide,transparent:material.transparent||!0,opacity:material.opacity||1})}catch(e){console.log("ERROR: Could not load material %s",material.texture)}return new THREE.MeshLambertMaterial({color:material.color,transparent:!0,opacity:material.opacity||1})},this.init=function(){instance.scene=new THREE.Scene,instance.renderer=new THREE.WebGLRenderer({antialias:!0}),instance.renderer.setSize(instance.viewportWidth,instance.viewportHeight),instance.renderer.shadowMapEnabled=!0,instance.renderer.shadowMapType=THREE.PCFSoftShadowMap,instance.viewport.appendChild(instance.renderer.domElement),instance.renderer.setClearColor(instance.options.background,1),window.addEventListener("resize",function(){instance.viewportHeight=instance.viewport.clientHeight,instance.viewportWidth=instance.viewport.clientWidth,instance.renderer.setSize(instance.viewportWidth,instance.viewportHeight),instance.camera.aspect=instance.viewportWidth/instance.viewportHeight,instance.camera.updateProjectionMatrix()}),instance.camera=new THREE.PerspectiveCamera(30,instance.viewportWidth/instance.viewportHeight,.1,1e4),instance.camera.position.set(2*instance.options.defaultElement.width,instance.options.defaultElement.height,2*instance.options.defaultElement.width),instance.camera.lookAt(0,instance.options.defaultElement.height,0),instance.scene.add(instance.camera);var light1=new THREE.PointLight(11184810);light1.position.set(-200,300,-200),instance.scene.add(light1);var light2=new THREE.PointLight(16777215);if(light2.position.set(200,300,200),instance.scene.add(light2),instance.options.showOriginMarker){var axisHelper=new THREE.AxisHelper(500);instance.scene.add(axisHelper)}document.addEventListener("mousemove",instance.onMouseMove,!1),instance.controls=new THREE.OrbitControls(instance.camera,instance.renderer.domElement)},this.intersect=function(obj,bsp){var intersectionBsp,mesh,objBsp,result;obj instanceof THREE.Mesh?(objBsp=new ThreeBSP(obj),intersectionBsp=bsp.intersect(objBsp),result=new THREE.Mesh(intersectionBsp.toGeometry(),obj.material),result.geometry.computeFaceNormals(),result.geometry.computeVertexNormals()):(result=new THREE.Object3D,obj?obj.children.forEach(function(child){child&&(mesh=instance.intersect(child,bsp),result.add(mesh))}):console.dir(obj)),result.position.set(obj.position.getComponent(0),obj.position.getComponent(1),obj.position.getComponent(2));var p1=JSON.stringify(obj.position),p2=JSON.stringify(result.position);return console.log("%s : %s",p1,p2),result},this.merge=function(A,B){var C={};return Object.keys(A).forEach(function(key){C[key]=A[key]}),Object.keys(B).forEach(function(key){C[key]=B[key]}),C},this.on=function(event,handler){instance.handlers.hasOwnProperty(event)||(instance.handlers[event]=[]),instance.handlers[event].push(handler)},this.onMouseMove=function(event){event.preventDefault(),instance.mouse.x=event.clientX/window.innerWidth*2-1,instance.mouse.y=2*-(event.clientY/window.innerHeight)+1},this.select=function(){if(instance.options.enableSelection){var vector=new THREE.Vector3(instance.mouse.x,instance.mouse.y,1).unproject(instance.camera),position=instance.camera.position;instance.raycaster.set(position,vector.sub(position).normalize());var intersects=instance.raycaster.intersectObjects(instance.scene.children,!0);intersects.length>0?(instance.options.debug&&console.dir(intersects[0]),intersects[0].object!=instance.selected&&(instance.selected&&instance.selected.material.color.setHex(instance.selected.currentHex),instance.selected=intersects[0].object,instance.selected.currentHex=instance.selected.material.color.getHex(),instance.selected.material.color.setHex(instance.options.selectedMaterialColor))):(instance.selected&&instance.selected.material.color.setHex(instance.selected.currentHex),instance.selected=null)}},this.stop=function(){},this.subtract=function(A,B){var aBsp,bBsp,result,subtractedBsp;return aBsp=new ThreeBSP(A),bBsp=new ThreeBSP(B),subtractedBsp=aBsp.subtract(bBsp),result=new THREE.Mesh(subtractedBsp.toGeometry(),A.material),result.geometry.computeFaceNormals(),result.geometry.computeVertexNormals(),result.position.set(A.position.getComponent(0),A.position.getComponent(1),A.position.getComponent(2)),result},this.zoomObject=function(obj){var correctForDepth=1.3,helper=new THREE.BoundingBoxHelper(obj);helper.update();var boundingSphere=helper.box.getBoundingSphere(),center=boundingSphere.center,radius=boundingSphere.radius,distance=center.distanceTo(instance.camera.position)-radius,realHeight=Math.abs(helper.box.max.y-helper.box.min.y),fov=2*Math.atan(realHeight*correctForDepth/(10*distance))*(180/Math.PI);instance.camera.fov=fov,instance.camera.updateProjectionMatrix()},this.init()};